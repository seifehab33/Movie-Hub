{"ast":null,"code":"var Errors = function () {\n  this.errors = {};\n};\nErrors.prototype = {\n  constructor: Errors,\n  /**\n   * Add new error message for given attribute\n   *\n   * @param  {string} attribute\n   * @param  {string} message\n   * @return {void}\n   */\n  add: function (attribute, message) {\n    if (!this.has(attribute)) {\n      this.errors[attribute] = [];\n    }\n    if (this.errors[attribute].indexOf(message) === -1) {\n      this.errors[attribute].push(message);\n    }\n  },\n  /**\n   * Returns an array of error messages for an attribute, or an empty array\n   *\n   * @param  {string} attribute A key in the data object being validated\n   * @return {array} An array of error messages\n   */\n  get: function (attribute) {\n    if (this.has(attribute)) {\n      return this.errors[attribute];\n    }\n    return [];\n  },\n  /**\n   * Returns the first error message for an attribute, false otherwise\n   *\n   * @param  {string} attribute A key in the data object being validated\n   * @return {string|false} First error message or false\n   */\n  first: function (attribute) {\n    if (this.has(attribute)) {\n      return this.errors[attribute][0];\n    }\n    return false;\n  },\n  /**\n   * Get all error messages from all failing attributes\n   *\n   * @return {Object} Failed attribute names for keys and an array of messages for values\n   */\n  all: function () {\n    return this.errors;\n  },\n  /**\n   * Determine if there are any error messages for an attribute\n   *\n   * @param  {string}  attribute A key in the data object being validated\n   * @return {boolean}\n   */\n  has: function (attribute) {\n    if (this.errors.hasOwnProperty(attribute)) {\n      return true;\n    }\n    return false;\n  }\n};\nmodule.exports = Errors;","map":{"version":3,"names":["Errors","errors","prototype","constructor","add","attribute","message","has","indexOf","push","get","first","all","hasOwnProperty","module","exports"],"sources":["D:/Web Development/React-djangoproject/frontend/node_modules/validatorjs/src/errors.js"],"sourcesContent":["var Errors = function() {\n  this.errors = {};\n};\n\nErrors.prototype = {\n  constructor: Errors,\n\n  /**\n   * Add new error message for given attribute\n   *\n   * @param  {string} attribute\n   * @param  {string} message\n   * @return {void}\n   */\n  add: function(attribute, message) {\n    if (!this.has(attribute)) {\n      this.errors[attribute] = [];\n    }\n\n    if (this.errors[attribute].indexOf(message) === -1) {\n      this.errors[attribute].push(message);\n    }\n  },\n\n  /**\n   * Returns an array of error messages for an attribute, or an empty array\n   *\n   * @param  {string} attribute A key in the data object being validated\n   * @return {array} An array of error messages\n   */\n  get: function(attribute) {\n    if (this.has(attribute)) {\n      return this.errors[attribute];\n    }\n\n    return [];\n  },\n\n  /**\n   * Returns the first error message for an attribute, false otherwise\n   *\n   * @param  {string} attribute A key in the data object being validated\n   * @return {string|false} First error message or false\n   */\n  first: function(attribute) {\n    if (this.has(attribute)) {\n      return this.errors[attribute][0];\n    }\n\n    return false;\n  },\n\n  /**\n   * Get all error messages from all failing attributes\n   *\n   * @return {Object} Failed attribute names for keys and an array of messages for values\n   */\n  all: function() {\n    return this.errors;\n  },\n\n  /**\n   * Determine if there are any error messages for an attribute\n   *\n   * @param  {string}  attribute A key in the data object being validated\n   * @return {boolean}\n   */\n  has: function(attribute) {\n    if (this.errors.hasOwnProperty(attribute)) {\n      return true;\n    }\n\n    return false;\n  }\n};\n\nmodule.exports = Errors;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAG,SAAAA,CAAA,EAAW;EACtB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;AAClB,CAAC;AAEDD,MAAM,CAACE,SAAS,GAAG;EACjBC,WAAW,EAAEH,MAAM;EAEnB;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,GAAG,EAAE,SAAAA,CAASC,SAAS,EAAEC,OAAO,EAAE;IAChC,IAAI,CAAC,IAAI,CAACC,GAAG,CAACF,SAAS,CAAC,EAAE;MACxB,IAAI,CAACJ,MAAM,CAACI,SAAS,CAAC,GAAG,EAAE;IAC7B;IAEA,IAAI,IAAI,CAACJ,MAAM,CAACI,SAAS,CAAC,CAACG,OAAO,CAACF,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;MAClD,IAAI,CAACL,MAAM,CAACI,SAAS,CAAC,CAACI,IAAI,CAACH,OAAO,CAAC;IACtC;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEI,GAAG,EAAE,SAAAA,CAASL,SAAS,EAAE;IACvB,IAAI,IAAI,CAACE,GAAG,CAACF,SAAS,CAAC,EAAE;MACvB,OAAO,IAAI,CAACJ,MAAM,CAACI,SAAS,CAAC;IAC/B;IAEA,OAAO,EAAE;EACX,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEM,KAAK,EAAE,SAAAA,CAASN,SAAS,EAAE;IACzB,IAAI,IAAI,CAACE,GAAG,CAACF,SAAS,CAAC,EAAE;MACvB,OAAO,IAAI,CAACJ,MAAM,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;IAClC;IAEA,OAAO,KAAK;EACd,CAAC;EAED;AACF;AACA;AACA;AACA;EACEO,GAAG,EAAE,SAAAA,CAAA,EAAW;IACd,OAAO,IAAI,CAACX,MAAM;EACpB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEM,GAAG,EAAE,SAAAA,CAASF,SAAS,EAAE;IACvB,IAAI,IAAI,CAACJ,MAAM,CAACY,cAAc,CAACR,SAAS,CAAC,EAAE;MACzC,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;AACF,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAGf,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}